{"input_text": "convert following Python code from MySQL to Spanner \nCREATE SCHEMA shakespeare;\n\nUSE shakespeare;\n\n/* play and characters table */\nCREATE TABLE amnd(\n        line_number INT NOT NULL AUTO_INCREMENT,\n    char_name TEXT,\n    play_text TEXT,\n    PRIMARY KEY (line_number)\n);\n\n/* performance table */\nCREATE TABLE performance(\n        query_type TEXT,\n    query_time FLOAT\n);", "output_text": "CREATE TABLE amnd (\n  line_number INT64 NOT NULL,\n  char_name STRING(MAX),\n  play_text STRING(MAX),\n) PRIMARY KEY(line_number);\n\nCREATE TABLE performance (\n  query_type STRING(MAX),\n  query_time FLOAT64,\n) PRIMARY KEY(query_type);"}
{"input_text": "convert following Python code from MySQL to Spanner \n# read data from two text files and load the data into databases\n\nimport pymysql\nimport time\n\nmyConnection = pymysql.connect(\n    host=\"localhost\", user=\"root\", password=\"root\", db=\"shakespeare\")\n\ncur = myConnection.cursor()\n\n# read character file and get all characters\nwith open(\"datasets/characters.txt\", \"r\") as char:\n    characterList = char.read().splitlines()\n\n# as first character is unknown in Play file, initialize as Unknown\ncurrentCharacter = \"Unknown\"\n\nstart_time = time.time()\n\ncreateSQL = \"INSERT INTO amnd(char_name, play_text) VALUES(%s, %s);\"\n\n# Part 1: process Play file text\n# to Create a Record for each line in the play\n# The character who is speaking\n# The line number\n# The phrase itself, trimmed of spaces\nwith open(\"datasets/A_Midsummer_Nights_Dream.txt\", \"r\") as playlines:\n    for line in playlines:\n        if line.upper().strip() in characterList:\n            currentCharacter = line.upper().strip()\n            print(\"changing character to : \", currentCharacter)\n        else:\n            sql_values = currentCharacter, line.strip()\n            print(\"writing line : \", sql_values)\n            cur.execute(createSQL, sql_values)\n\nmyConnection.commit()\nend_time = time.time()\n\n\n# Part 2: process for Query Performance Calculation\ncur.execute('SELECT COUNT(line_number) FROM amnd;')\nnumPlayLines = cur.fetchall()[0][0]\nprint(numPlayLines, 'rows')\n\n# calculate query execution time\nqueryExecTime = end_time - start_time\nprint(\"Total query time: \", queryExecTime)\n\nqueryTimePerLine = queryExecTime / numPlayLines\nprint(\"Query time per line: \", queryTimePerLine)\n\n# record query execution time into performance table\ninsertPerformanceSQL = \"INSERT INTO performance VALUES('CREATE',%s);\"\ncur.execute(insertPerformanceSQL, queryTimePerLine)\n\nmyConnection.commit()\nmyConnection.close()", "output_text": "from google.cloud import spanner\nimport time\n\n# Initialize Cloud Spanner client\nspanner_client = spanner.Client()\n\ninstance_id = \"\"\ndatabase_id = \"shakespeare\"\n\n# Connect to the database\ndatabase = spanner_client.instance(instance_id).database(database_id)\n\n# Read character file and get all characters\nwith open(\"datasets/characters.txt\", \"r\") as char:\n    characterList = char.read().splitlines()\n\n# As first character is unknown in Play file, initialize as Unknown\ncurrentCharacter = \"Unknown\"\n\nstart_time = time.time()\n\n# Part 1: Process Play file text to create a record for each line in the play\n# The character who is speaking\n# The line number\n# The phrase itself, trimmed of spaces\nwith open(\"datasets/A_Midsummer_Nights_Dream.txt\", \"r\") as playlines:\n    for line in playlines:\n        if line.upper().strip() in characterList:\n            currentCharacter = line.upper().strip()\n            print(\"Changing character to: \", currentCharacter)\n        else:\n            # Insert the line into the Spanner database\n            with database.batch() as batch:\n                batch.insert(\n                    table=\"amnd\",\n                    columns=(\"char_name\", \"play_text\"),\n                    values=[(currentCharacter, line.strip())]\n                )\n\nend_time = time.time()\n\n# Part 2: Process for Query Performance Calculation\nquery_time = end_time - start_time\n\n# Get the count of lines inserted into the amnd table\nnum_play_lines = database.execute_sql('SELECT COUNT(line_number) FROM amnd').one()[0]\nprint(num_play_lines, 'rows')\n\n# Calculate query execution time per line\nquery_time_per_line = query_time / num_play_lines\nprint(\"Total query time: \", query_time)\nprint(\"Query time per line: \", query_time_per_line)\n\n# Record query execution time into performance table\nwith database.batch() as batch:\n    batch.insert(\n        table=\"performance\",\n        columns=(\"query_type\", \"query_time\"),\n        values=[(\"CREATE\", query_time_per_line)]\n    )\n"}
{"input_text": "convert following Python code from MySQL to Spanner \n# Update Character Name in uppercase for every line in plays\n# example: \"Now, fair Hippolyta, our nuptial hour\" => Now, fair HIPPOLYTA, our nuptial hour\n\n\nimport pymysql\nimport time\n\nmyConnection = pymysql.connect(\n    host=\"localhost\", user=\"root\", password=\"root\", db=\"shakespeare\")\n\ncur = myConnection.cursor()\nstart_time = time.time()\n\n# Part 1: Update Character Name in uppercase for every line in plays\nupdateSQL = \"UPDATE amnd SET play_text = REPLACE(play_text, %s, %s);\"\n\nwith open(\"datasets/characters.txt\", \"r\") as char:\n    for character in char.read().splitlines():\n        print(\"capitalizing occurences of \", character)\n        updateStrings = character.capitalize(), character.upper()\n        cur.execute(updateSQL, updateStrings)\n\nmyConnection.commit()\n\nend_time = time.time()\n\n# Part 2: process for Query Performance Calculation\ncur.execute('SELECT COUNT(line_number) FROM amnd;')\nnumPlayLines = cur.fetchall()[0][0]\nprint(numPlayLines, 'rows')\n\n# calculate query execution time\nqueryExecTime = end_time - start_time\nprint(\"Total query time: \", queryExecTime)\n\nqueryTimePerLine = queryExecTime / numPlayLines\nprint(\"Query time per line: \", queryTimePerLine)\n\n# record query execution time into performance table\ninsertPerformanceSQL = \"INSERT INTO performance VALUES('UPDATE',%s);\"\ncur.execute(insertPerformanceSQL, queryTimePerLine)\n\nmyConnection.commit()\nmyConnection.close()", "output_text": "from google.cloud import spanner\nimport time\n\n# Initialize Cloud Spanner client\nspanner_client = spanner.Client()\n\ninstance_id = \"shakespeare\"\ndatabase_id = \"shakespeare\"\n\n# Connect to the database\ndatabase = spanner_client.instance(instance_id).database(database_id)\n\nstart_time = time.time()\n\n# Part 1: Update Character Name in uppercase for every line in plays\nupdate_sql = \"UPDATE amnd SET play_text = REPLACE(play_text, @old_character, @new_character);\"\n\nwith open(\"datasets/characters.txt\", \"r\") as char:\n    for character in char.read().splitlines():\n        print(\"Capitalizing occurrences of \", character)\n        # Bind parameters for the update statement\n        params = {\"old_character\": character.capitalize(), \"new_character\": character.upper()}\n        # Execute the update statement\n        database.execute_sql(update_sql, params=params)\n\nend_time = time.time()\n\n# Part 2: Process for Query Performance Calculation\n# Get the count of lines in the amnd table\nnum_play_lines = database.execute_sql('SELECT COUNT(line_number) FROM amnd').one()[0]\nprint(num_play_lines, 'rows')\n\n# Calculate query execution time\nquery_exec_time = end_time - start_time\nprint(\"Total query time: \", query_exec_time)\n\n# Calculate query time per line\nquery_time_per_line = query_exec_time / num_play_lines\nprint(\"Query time per line: \", query_time_per_line)\n\n# Record query execution time into performance table\nwith database.batch() as batch:\n    batch.insert(\n        table=\"performance\",\n        columns=(\"query_type\", \"query_time\"),\n        values=[(\"UPDATE\", query_time_per_line)]\n    )\n"}
{"input_text": "convert following Python code from MySQL to Spanner \n# Delete Stage Directions in Plays text such as \"Exit\", \"Enter\", etc\n\nimport pymysql\nimport time\n\nmyConnection = pymysql.connect(\n    host=\"localhost\", user=\"root\", password=\"root\", db=\"shakespeare\")\n\ncur = myConnection.cursor()\nstart_time = time.time()\n\ncur.execute('SELECT COUNT(line_number) FROM amnd;')\nnumPlayLines_Before_Delete = cur.fetchall()[0][0]\n\n\n# delete stage directions\n# RLIKE : regular expression like, ^ means starts with , | means OR\ncur.execute(\n    \"DELETE FROM amnd WHERE play_text RLIKE '^enter|^exit|^act|^scence|^exeunt';\")\n\nprint(\"Deleting lines..\")\n\nend_time = time.time()\n\nmyConnection.commit()\n\n\ncur.execute('SELECT COUNT(line_number) FROM amnd;')\nnumPlayLines_After_Delete = cur.fetchall()[0][0]\nnumPlayLInes_Deleted = numPlayLines_Before_Delete - numPlayLines_After_Delete\nprint(numPlayLInes_Deleted, 'rows')\n\n# calculate query execution time\nqueryExecTime = end_time - start_time\nprint(\"Total query time: \", queryExecTime)\n\nqueryTimePerLine = queryExecTime / numPlayLInes_Deleted\nprint(\"Query time per line: \", queryTimePerLine)\n\n# record query execution time into performance table\ninsertPerformanceSQL = \"INSERT INTO performance VALUES('DELETE',%s);\"\ncur.execute(insertPerformanceSQL, queryTimePerLine)\n\nmyConnection.commit()\nmyConnection.close()", "output_text": "from google.cloud import spanner\nimport time\n\n# Initialize Cloud Spanner client\nspanner_client = spanner.Client()\n\ninstance_id = \"\"\ndatabase_id = \"shakespeare\"\n\n# Connect to the database\ndatabase = spanner_client.instance(instance_id).database(database_id)\n\nstart_time = time.time()\n\n# Get the count of lines in the amnd table before deletion\nnum_play_lines_before_delete = database.execute_sql('SELECT COUNT(line_number) FROM amnd').one()[0]\n\n# Delete stage directions\n# RLIKE is not supported in Cloud Spanner, so we will use REGEXP_CONTAINS\n# Note: Cloud Spanner does not support the caret (^) anchor, so we'll use the equivalent REGEXP_CONTAINS syntax\ndelete_sql = \"\"\"\n    DELETE FROM amnd \n    WHERE REGEXP_CONTAINS(play_text, r'(?i)\\\\b(?:enter|exit|act|scene|exeunt)\\\\b')\n\"\"\"\ndatabase.execute_sql(delete_sql)\n\nprint(\"Deleting lines..\")\n\nend_time = time.time()\n\n# Get the count of lines in the amnd table after deletion\nnum_play_lines_after_delete = database.execute_sql('SELECT COUNT(line_number) FROM amnd').one()[0]\nnum_play_lines_deleted = num_play_lines_before_delete - num_play_lines_after_delete\nprint(num_play_lines_deleted, 'rows')\n\n# Calculate query execution time\nquery_exec_time = end_time - start_time\nprint(\"Total query time: \", query_exec_time)\n\n# Calculate query time per line\nquery_time_per_line = query_exec_time / num_play_lines_deleted\nprint(\"Query time per line: \", query_time_per_line)\n\n# Record query execution time into performance table\nwith database.batch() as batch:\n    batch.insert(\n        table=\"performance\",\n        columns=(\"query_type\", \"query_time\"),\n        values=[(\"DELETE\", query_time_per_line)]\n    )\n"}
{"input_text": "convert following Python code from MySQL to Spanner \n# get the plays and measure the performance of query\n\nimport pymysql\nimport time\n\nmyConnection = pymysql.connect(\n    host=\"localhost\", user=\"root\", password=\"root\", db=\"shakespeare\")\n\ncur = myConnection.cursor()\nstart_time = time.time()\n\n# Part 1: Get the plays from database\ncur.execute(\"SELECT play_text FROM amnd;\")\n\nfor line in cur.fetchall():\n    print(line[0])\n\nend_time = time.time()\n\n# Part 2: process for Query Performance Calculation\ncur.execute('SELECT COUNT(line_number) FROM amnd;')\nnumPlayLines = cur.fetchall()[0][0]\nprint(numPlayLines, 'rows')\n\n# calculate query execution time\nqueryExecTime = end_time - start_time\nprint(\"Total query time: \", queryExecTime)\n\nqueryTimePerLine = queryExecTime / numPlayLines\nprint(\"Query time per line: \", queryTimePerLine)\n\n# record query execution time into performance table\ninsertPerformanceSQL = \"INSERT INTO performance VALUES('READ',%s);\"\ncur.execute(insertPerformanceSQL, queryTimePerLine)\n\nmyConnection.commit()\nmyConnection.close()", "output_text": "from google.cloud import spanner\nimport time\n\n# Initialize Cloud Spanner client\nspanner_client = spanner.Client()\n\ninstance_id = \"\"\ndatabase_id = \"shakespeare\"\n\n# Connect to the database\ndatabase = spanner_client.instance(instance_id).database(database_id)\n\nstart_time = time.time()\n\n# Part 1: Get the plays from database\nquery_sql = \"SELECT play_text FROM amnd\"\nplays = database.execute_sql(query_sql).fetchall()\n\nfor row in plays:\n    print(row[0])\n\nend_time = time.time()\n\n# Part 2: Process for Query Performance Calculation\n# Get the count of lines in the amnd table\n"}
{"input_text": "convert following Python code from MySQL to Spanner \nimport pymysql\n\ndef execute(c, command):\n    c.execute(command)\n    return c.fetchall()\n\ndb = pymysql.connect(host='localhost', port=3306, user='root', passwd='', db='mysql') #, charset='utf8')\n\nc = db.cursor()\n\nfor table in execute(c, \"show tables;\"):\n    table = table[0]\n    cols = []\n    for item in execute(c, \"show columns from \" + table + \";\"):\n        cols.append(item[0])\n    data = execute(c, \"select * from \" + table + \";\")\n    with open(table + \".csv\", \"w\", encoding=\"utf-8\") as out:\n        out.write(\"\\t\".join(cols) + \"\\n\")\n        for row in data:\n            out.write(\"\\t\".join(str(el) for el in row) + \"\\n\")\n    print(table + \".csv written\")", "output_text": "from google.cloud import spanner\nimport csv\n\ndef execute(instance_id, database_id, query):\n    spanner_client = spanner.Client()\n    instance = spanner_client.instance(instance_id)\n    database = instance.database(database_id)\n    with database.snapshot() as snapshot:\n        results = snapshot.execute_sql(query)\n        return results\n\ninstance_id = 'spannerinsance'\ndatabase_id = 'spannerdb'\n\ntables_query = \"SELECT table_name FROM information_schema.tables WHERE table_catalog = '' AND table_schema = ''\"\ntables = execute(instance_id, database_id, tables_query)\n\nfor table_row in tables:\n    table = table_row[0]\n    columns_query = f\"SELECT column_name FROM information_schema.columns WHERE table_name = '{table}'\"\n    columns = execute(instance_id, database_id, columns_query)\n    cols = [column[0] for column in columns]\n\n    data_query = f\"SELECT * FROM {table}\"\n    data = execute(instance_id, database_id, data_query)\n    \n    with open(f\"{table}.csv\", \"w\", newline='', encoding=\"utf-8\") as out:\n        writer = csv.writer(out, delimiter='\\t')\n        writer.writerow(cols)\n        for row in data:\n            writer.writerow(row)\n    \n    print(f\"{table}.csv written\")\n"}
{"input_text": "convert following Python code from MySQL to Spanner \nimport mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  password=\"yourpassword\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"CREATE DATABASE test;\nuse test;\nCREATE TABLE test4 (id int NOT NULL AUTO_INCREMENT, data VARCHAR(255), data2 VARCHAR(255), PRIMARY KEY(id));\")", "output_text": "from google.cloud import spanner\n\ninstance_id = 'spannerinstance'\ndatabase_id = 'spannerdatabase' \n\nspanner_client = spanner.Client()\ninstance = spanner_client.instance(instance_id)\n\n# Create the database\noperation = instance.create_database(\n    database_id,\n    ddl_statements=[\n        \"\"\"\n        CREATE TABLE test4 (\n            id INT64 NOT NULL GENERATED ALWAYS AS IDENTITY,\n            data STRING(255),\n            data2 STRING(255),\n            PRIMARY KEY (id)\n        )\n        \"\"\"\n    ],\n)\nprint('Waiting for operation to complete...')\noperation.result()\nprint('Database and table created successfully.')\n"}
{"input_text": "convert following Python code from MySQL to Spanner \n# Connect to the database\nconnection = pymysql.connect(host='localhost',\n                             user='user',\n                             password='passwd',\n                             database='db',\n                             cursorclass=pymysql.cursors.DictCursor)", "output_text": "from google.cloud import spanner\n\n# Initialize the Spanner client\nspanner_client = spanner.Client()\n\ninstance_id = 'spannerinstance'\ndatabase_id = 'spannerdatabase'\n\ninstance = spanner_client.instance(instance_id)\ndatabase = instance.database(database_id)\n\ndef execute_query(query):\n    with database.snapshot() as snapshot:\n        results = snapshot.execute_sql(query)\n        return results\n\nquery = \"SELECT * FROM your_table\"\nresults = execute_query(query)\nfor row in results:\n    print(row)\n"}
{"input_text": "convert following Python code from MySQL to Spanner \n# Connect to the database\nconnection = pymysql.connect(host='localhost',\n                             user='user',\n                             password='passwd',\n                             database='db',\n                             cursorclass=pymysql.cursors.DictCursor)\nwith connection:\n    with connection.cursor() as cursor:\n        # Create a new record\n        sql = \"INSERT INTO `users` (`email`, `password`) VALUES (%s, %s)\"\n        cursor.execute(sql, ('webmaster@python.org', 'very-secret'))\n\n    # connection is not autocommit by default. So you must commit to save\n    # your changes.\n    connection.commit()", "output_text": "from google.cloud import spanner\n\n# Initialize the Spanner client\nspanner_client = spanner.Client()\n\ninstance_id = 'spannerinstance'\ndatabase_id = 'spannerdatabase'\n\ninstance = spanner_client.instance(instance_id)\ndatabase = instance.database(database_id)\n\ndef insert_user(email, password):\n    # Spanner uses sessions to interact with the database\n    with database.batch() as batch:\n        # Create a new record\n        batch.insert(\n            table='users',\n            columns=('email', 'password'),\n            values=[\n                (email, password),\n            ]\n        )\n\ninsert_user('webmaster@python.org', 'very-secret')\nprint(\"Record inserted successfully.\")\n"}
