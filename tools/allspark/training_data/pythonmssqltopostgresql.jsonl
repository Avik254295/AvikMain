{"input_text": "convert following Python code from MSSQL to Postgresql \nimport pyodbc\nSERVER = '<server-address>'\nDATABASE = '<database-name>'\nUSERNAME = '<username>'\nPASSWORD = '<password>'\nconnectionString = f'DRIVER={{ODBC Driver 18 for SQL Server}};SERVER={SERVER};DATABASE={DATABASE};UID={USERNAME};PWD={PASSWORD}'\nconn = pyodbc.connect(connectionString)", "output_text": "import psycopg2\n\nHOST = '<server-address>'\nDATABASE = '<database-name>'\nUSERNAME = '<username>'\nPASSWORD = '<password>'\n\nconn = psycopg2.connect(\n    host=HOST,\n    database=DATABASE,\n    user=USERNAME,\n    password=PASSWORD\n)"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nfrom random import randrange\nproductNumber = randrange(1000)\nSQL_STATEMENT = \"\"\"\nINSERT SalesLT.Product (\nName, \nProductNumber, \nStandardCost, \nListPrice, \nSellStartDate\n) OUTPUT INSERTED.ProductID \nVALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)\n\"\"\"\ncursor.execute(\n    SQL_STATEMENT,\n    f'Example Product {productNumber}', \n    f'EXAMPLE-{productNumber}', \n    100,\n    200\n)\nresultId = cursor.fetchval()\nprint(f\"Inserted Product ID : {resultId}\")\nconn.commit()\ncursor.close()\nconn.close()", "output_text": "from random import randrange\nimport psycopg2\n\n# Assuming you've already established a connection named 'conn'\ncursor = conn.cursor()\n\nproductNumber = randrange(1000)\n\nSQL_STATEMENT = \"\"\"\nINSERT INTO \"SalesLT\".\"Product\" (\n    \"Name\", \n    \"ProductNumber\", \n    \"StandardCost\", \n    \"ListPrice\", \n    \"SellStartDate\"\n) VALUES (%s, %s, %s, %s, CURRENT_TIMESTAMP)\nRETURNING \"ProductID\"\n\"\"\"\n\ncursor.execute(\n    SQL_STATEMENT,\n    (f'Example Product {productNumber}', \n     f'EXAMPLE-{productNumber}', \n     100,\n     200)\n)\n\nresultId = cursor.fetchone()[0]\nprint(f\"Inserted Product ID : {resultId}\")\n\nconn.commit()\ncursor.close()\nconn.close()"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nimport pymssql\nconn = pymssql.connect(\n    server='<server-address>',\n    user='<username>',\n    password='<password>',\n    database='<database-name>',\n    as_dict=True\n)\n", "output_text": "import psycopg2\nfrom psycopg2.extras import RealDictCursor\n\nconn = psycopg2.connect(\n    host='<server-address>',\n    user='<username>',\n    password='<password>',\n    database='<database-name>',\n    cursor_factory=RealDictCursor\n)"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nSQL_QUERY = \"\"\"\nSELECT \nTOP 5 c.CustomerID, \nc.CompanyName, \nCOUNT(soh.SalesOrderID) AS OrderCount \nFROM \nSalesLT.Customer AS c \nLEFT OUTER JOIN SalesLT.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID \nGROUP BY \nc.CustomerID, \nc.CompanyName \nORDER BY \nOrderCount DESC;\n\"\"\"\ncursor = conn.cursor()\ncursor.execute(SQL_QUERY)\nrecords = cursor.fetchall()\nfor r in records:\n    print(f\"{r['CustomerID']}\\t{r['OrderCount']}\\t{r['CompanyName']}\")\n", "output_text": "SQL_QUERY = \"\"\"\nSELECT \n    c.\"CustomerID\", \n    c.\"CompanyName\", \n    COUNT(soh.\"SalesOrderID\") AS \"OrderCount\" \nFROM \n    \"SalesLT\".\"Customer\" AS c \nLEFT OUTER JOIN \"SalesLT\".\"SalesOrderHeader\" AS soh ON c.\"CustomerID\" = soh.\"CustomerID\" \nGROUP BY \n    c.\"CustomerID\", \n    c.\"CompanyName\" \nORDER BY \n    \"OrderCount\" DESC\nLIMIT 5;\n\"\"\"\n\ncursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)\ncursor.execute(SQL_QUERY)\nrecords = cursor.fetchall()\n\nfor r in records:\n    print(f\"{r['CustomerID']}\\t{r['OrderCount']}\\t{r['CompanyName']}\")"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nfrom random import randrange\nproductNumber = randrange(1000)\nSQL_STATEMENT = \"\"\"\nINSERT SalesLT.Product (\nName, \nProductNumber, \nStandardCost, \nListPrice, \nSellStartDate\n) OUTPUT INSERTED.ProductID \nVALUES (%s, %s, %s, %s, CURRENT_TIMESTAMP)\n\"\"\"\ncursor.execute(\n    SQL_STATEMENT,\n    (\n        f'Example Product {productNumber}', \n        f'EXAMPLE-{productNumber}', \n        100,\n        200\n    )\n)\nresult = cursor.fetchone()\nprint(f\"Inserted Product ID : {result['ProductID']}\")\nconn.commit()\ncursor.close()\nconn.close()", "output_text": "from random import randrange\nimport psycopg2\nfrom psycopg2.extras import DictCursor\n\n# Assuming you've already established a connection named 'conn'\ncursor = conn.cursor(cursor_factory=DictCursor)\n\nproductNumber = randrange(1000)\n\nSQL_STATEMENT = \"\"\"\nINSERT INTO \"SalesLT\".\"Product\" (\n    \"Name\", \n    \"ProductNumber\", \n    \"StandardCost\", \n    \"ListPrice\", \n    \"SellStartDate\"\n) VALUES (%s, %s, %s, %s, CURRENT_TIMESTAMP)\nRETURNING \"ProductID\"\n\"\"\"\n\ncursor.execute(\n    SQL_STATEMENT,\n    (\n        f'Example Product {productNumber}', \n        f'EXAMPLE-{productNumber}', \n        100,\n        200\n    )\n)\n\nresult = cursor.fetchone()\nprint(f\"Inserted Product ID : {result['ProductID']}\")\n\nconn.commit()\ncursor.close()\nconn.close()"}
{"input_text": "convert following Python code from MSSQL to Postgresql \n# DBconnect.py\nimport sqlalchemy as sa\nfrom sqlalchemy import create_engine\nimport urllib\nimport pyodbc\n \nconn = urllib.parse.quote_plus(\n    'Data Source Name=MssqlDataSource;'\n    'Driver={SQL Server};'\n    'Server=POWERSERVER\\POWERSERVER;'\n    'Database=MSSQLDB;'\n    'Trusted_connection=yes;'\n)\n \ntry:\n    \n    coxn = create_engine('mssql+pyodbc:///?odbc_connect={}'.format(conn))\n    print(\"Passed\")\n \nexcept:\n    print(\"failed!\")", "output_text": "from sqlalchemy import create_engine, Table, Column, Integer, String, MetaData\n\n# Replace with your PostgreSQL connection string\nengine = create_engine('postgresql://username:password@host:port/database')\n\nmeta = MetaData()\n\nstudents = Table(\n   'students', meta, \n   Column('id', Integer, primary_key=True), \n   Column('name', String), \n   Column('lastname', String),\n)\n\nmeta.create_all(engine)"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nimport pyodbc\nimport csv\n\n# Configuration\ncsv_file_path = 'path/to/your/file.csv'  # Path to your CSV file\nserver = 'your_server'  # SQL Server name\ndatabase = 'your_database_name'  # Database name\nusername = 'your_username'  # Database username\npassword = 'your_password'  # Database password\ntable_name = 'your_table_name'  # Target table name in SQL Server\n\n# Connect to SQL Server\nconn_str = f'DRIVER={{SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}'\nconn = pyodbc.connect(conn_str)\ncursor = conn.cursor()\n\n# Create table with appropriate schema\ncreate_table_sql = f\"\"\"\nIF OBJECT_ID('{table_name}', 'U') IS NOT NULL\n    DROP TABLE {table_name};\nCREATE TABLE {table_name} (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    timestamp_column DATETIME\n);\n\"\"\"\ncursor.execute(create_table_sql)\nconn.commit()\n\n# Load data from CSV file into SQL Server\nwith open(csv_file_path, 'r') as file:\n    csv_reader = csv.reader(file)\n    next(csv_reader)  # Skip header row\n    for row in csv_reader:\n        id_val = int(row[0])\n        name_val = row[1]\n        timestamp_val = row[2]\n        insert_sql = f\"\"\"\n        INSERT INTO {table_name} (id, name, timestamp_column)\n        VALUES (?, ?, ?)\n        \"\"\"\n        cursor.execute(insert_sql, (id_val, name_val, timestamp_val))\n    conn.commit()\n\n# Optionally convert timestamp data if needed\nupdate_sql = f\"\"\"\nUPDATE {table_name}\nSET timestamp_column = TRY_CAST(timestamp_column AS DATETIME)\n\"\"\"\ncursor.execute(update_sql)\nconn.commit()\n\n# Clean up\ncursor.close()\nconn.close()\n\nprint(f\"Data has been copied from {csv_file_path} to the {table_name} table in the {database} database.\")", "output_text": "import psycopg2\nimport csv\nfrom psycopg2 import sql\n\n# Configuration\ncsv_file_path = 'path/to/your/file.csv'  # Path to your CSV file\nhost = 'your_host'  # Hostname or IP address\ndatabase = 'your_database_name'  # Database name\nusername = 'your_username'  # Database username\npassword = 'your_password'  # Database password\ntable_name = 'your_table_name'  # Target table name in PostgreSQL\n\n# Connect to PostgreSQL\nconn = psycopg2.connect(\n    host=host,\n    database=database,\n    user=username,\n    password=password\n)\ncursor = conn.cursor()\n\n# Create table with appropriate schema\ncreate_table_sql = sql.SQL(\"\"\"\nDROP TABLE IF EXISTS {table};\nCREATE TABLE {table} (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    timestamp_column TIMESTAMP\n);\n\"\"\").format(table=sql.Identifier(table_name))\n\ncursor.execute(create_table_sql)\nconn.commit()\n\n# Load data from CSV file into PostgreSQL\nwith open(csv_file_path, 'r') as file:\n    csv_reader = csv.reader(file)\n    next(csv_reader)  # Skip header row\n    for row in csv_reader:\n        id_val = int(row[0])\n        name_val = row[1]\n        timestamp_val = row[2]\n        \n        insert_sql = sql.SQL(\"\"\"\n        INSERT INTO {table} (id, name, timestamp_column)\n        VALUES (%s, %s, %s)\n        \"\"\").format(table=sql.Identifier(table_name))\n        \n        cursor.execute(insert_sql, (id_val, name_val, timestamp_val))\n\nconn.commit()\n\n# Optionally convert timestamp data if needed\nupdate_sql = sql.SQL(\"\"\"\nUPDATE {table}\nSET timestamp_column = timestamp_column::timestamp\n\"\"\").format(table=sql.Identifier(table_name))\n\ncursor.execute(update_sql)\nconn.commit()\n\n# Clean up\ncursor.close()\nconn.close()\n\nprint(f\"Data has been copied from {csv_file_path} to the {table_name} table in the {database} database.\")"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nimport pyodbc\n\n\nclass SqlConnection:\n    def __init__(self, cnn_string):\n        self.cnn_string = cnn_string\n        self.connection = pyodbc.connect(self.cnn_string, autocommit=False)\n        self.cursor = self.connection.cursor()\n        self.results = None\n\n    def close_cnn(self):\n        self.connection.close()\n\n    def commit(self):\n        self.connection.commit()\n\n    def command_execute(self, sql_command, commit=False):\n        self.cursor.execute(sql_command)\n        if commit:\n            self.connection.commit()\n        return self.cursor\n\n    def getresults(self):\n        return self.results\n\n    def query_execute(self, sql_command):\n        try:\n            self.cursor.execute(sql_command)\n            self.results = self.cursor.fetchall()\n            return self.results\n        except Exception as e:\n            self.results = e\n            return self.results\n\n\nif __name__ == '__main__':\n    try:\n        # create a connection (formatted for SQLEXPRESS, your connection string may look different)\n        conn = SqlConnection(cnn_string='Driver={SQL Server};Server=<your server>;Database=<your db>;')\n        # attempt to perform two updates. this is a made-up situation, but assume that both updates must be successfully\n        # executed for the db to remain in a consistent state.\n        # 1st update:\n        sql = \"update Forecast set PM = 'WJT' where PM = 'WJT2'\"\n        cursor = conn.command_execute(sql, commit=False)\n        print(str(cursor.rowcount) + ' row(s) modified (NOT committed yet!)')\n        # some more logic might go here...\n        # for demo purposes, explicitly raise an error before the 2nd update (db not consistent)\n        raise ValueError('Error occurred before 2nd update. Nothing will be committed!')\n        # 2nd update required to make db consistent:\n        sql = \"update PM set Central_PM = 'WJT' where Central_PM = 'WJT2'\"\n        cursor = conn.command_execute(sql, commit=False)\n        print(str(cursor.rowcount) + ' row(s) modified (NOT committed yet!)')\n        # after all logic executed, db should be in a consistent state, and connection committed\n        conn.commit()\n        print('Connection, and all commands against it, comitted.')\n    except pyodbc.OperationalError as e:\n        print('Could not establish connection: ' + str(e))\n    except ValueError as e:\n        print(str(e))\n    finally:\n        # attempt to close the connection\n        try:\n            conn.close_cnn()\n        except:\n            pass\n        try:\n            # for demo purposes, query one of the tables - if done after closing the connection,\n            #   and the connection not committed, you should see the original values.\n            # move this try block before closing the connection, and you should see the values updated -\n            #   closing the connection does the \"rollback\"\n            conn = SqlConnection(cnn_string='Driver={SQL Server};Server=<your server>;Database=<your db>;')\n            sql = 'select Central_PM from PM'\n            results = conn.query_execute(sql)\n            for PM in results:\n                print(PM[0].strip())\n            conn.close_cnn()\n        except:\n            pass", "output_text": "import psycopg2\n\nclass SqlConnection:\n    def __init__(self, cnn_params):\n        self.cnn_params = cnn_params\n        self.connection = psycopg2.connect(**self.cnn_params)\n        self.connection.autocommit = False\n        self.cursor = self.connection.cursor()\n        self.results = None\n\n    def close_cnn(self):\n        self.connection.close()\n\n    def commit(self):\n        self.connection.commit()\n\n    def command_execute(self, sql_command, commit=False):\n        self.cursor.execute(sql_command)\n        if commit:\n            self.connection.commit()\n        return self.cursor\n\n    def getresults(self):\n        return self.results\n\n    def query_execute(self, sql_command):\n        try:\n            self.cursor.execute(sql_command)\n            self.results = self.cursor.fetchall()\n            return self.results\n        except Exception as e:\n            self.results = e\n            return self.results\n\nif __name__ == '__main__':\n    try:\n        # create a connection\n        conn = SqlConnection(cnn_params={\n            'host': '<your host>',\n            'database': '<your db>',\n            'user': '<your username>',\n            'password': '<your password>'\n        })\n\n        # attempt to perform two updates\n        # 1st update:\n        sql = \"UPDATE Forecast SET PM = 'WJT' WHERE PM = 'WJT2'\"\n        cursor = conn.command_execute(sql, commit=False)\n        print(f\"{cursor.rowcount} row(s) modified (NOT committed yet!)\")\n\n        # some more logic might go here...\n        # for demo purposes, explicitly raise an error before the 2nd update (db not consistent)\n        raise ValueError('Error occurred before 2nd update. Nothing will be committed!')\n\n        # 2nd update required to make db consistent:\n        sql = \"UPDATE PM SET Central_PM = 'WJT' WHERE Central_PM = 'WJT2'\"\n        cursor = conn.command_execute(sql, commit=False)\n        print(f\"{cursor.rowcount} row(s) modified (NOT committed yet!)\")\n\n        # after all logic executed, db should be in a consistent state, and connection committed\n        conn.commit()\n        print('Connection, and all commands against it, committed.')\n\n    except psycopg2.OperationalError as e:\n        print('Could not establish connection: ' + str(e))\n    except ValueError as e:\n        print(str(e))\n    finally:\n        # attempt to close the connection\n        try:\n            conn.close_cnn()\n        except:\n            pass\n\n        try:\n            # for demo purposes, query one of the tables\n            conn = SqlConnection(cnn_params={\n                'host': '<your host>',\n                'database': '<your db>',\n                'user': '<your username>',\n                'password': '<your password>'\n            })\n            sql = 'SELECT Central_PM FROM PM'\n            results = conn.query_execute(sql)\n            for PM in results:\n                print(PM[0].strip())\n            conn.close_cnn()\n        except:\n            pass"}
{"input_text": "convert following Python code from MSSQL to Postgresql \ndef run_migration(migration_files):\n    conn = init_pyodbc_connection(autocommit=False)\n    conn.autocommit = False\n    cur = conn.cursor()\n    for migration_file in migration_files:\n        with open(migration_file.strip()) as fh:\n            migrate_sql = fh.read()\n        try:\n            cur.execute(migrate_sql)\n        except:\n            conn.rollback()\n            raise\n    conn.commit()\n    conn.close()", "output_text": "import psycopg2\n\ndef run_migration(migration_files):\n    conn = psycopg2.connect(\n        host=\"your_host\",\n        database=\"your_database\",\n        user=\"your_username\",\n        password=\"your_password\"\n    )\n    conn.autocommit = False\n    cur = conn.cursor()\n    \n    for migration_file in migration_files:\n        with open(migration_file.strip()) as fh:\n            migrate_sql = fh.read()\n        \n        try:\n            cur.execute(migrate_sql)\n        except:\n            conn.rollback()\n            raise\n        \n    conn.commit()\n    cur.close()\n    conn.close()"}
{"input_text": "convert following Python code from MSSQL to Postgresql \ndef db_connect(db, driver='ODBC Driver 17 for SQL Server', host='', UID='', PWD='', autocommit=False):\n    \"\"\"Returns a connection and a cursor object for the specified database.\"\"\"\n    conn = pyodbc.connect(driver=driver,\n                        host=host,\n                        database=db,\n                        UID=UID,\n                        PWD=PWD,\n                        autocommit=autocommit\n                        )\n    print(f'Connect established to database {db}')\n    return conn, conn.cursor()\n\ndef db_clear(db, recreate=True):\n    \"\"\"Drops and recreates the specified database, ready for insert.\"\"\"\n    conn, curs = db_connect('master')\n    curs.execute(f\"\"\"IF EXISTS (SELECT name from sys.databases WHERE (name = {db}))\n        BEGIN\n            ALTER DATABASE {db} SET SINGLE_USER WITH ROLLBACK IMMEDIATE;\n            DROP DATABASE {db};\n        END;\"\"\")\n    if recreate:\n        curs.execute(f\"CREATE DATABASE {db};\")\n        conn.close()\n        print(f'{db} successfully dropped and recreated.')\n    else:\n        print(f'{db} successfully dropped.')\n    return\n\ndb_clear('test')", "output_text": "import psycopg2\n\ndef db_connect(db, host='', user='', password='', autocommit=False):\n    \"\"\"Returns a connection and a cursor object for the specified database.\"\"\"\n    conn = psycopg2.connect(\n        host=host,\n        database=db,\n        user=user,\n        password=password\n    )\n    conn.autocommit = autocommit\n    print(f'Connection established to database {db}')\n    return conn, conn.cursor()\n\ndef db_clear(db, recreate=True):\n    \"\"\"Drops and recreates the specified database, ready for insert.\"\"\"\n    conn, curs = db_connect('postgres')  # Connect to default 'postgres' database\n    conn.autocommit = True  # Set autocommit to True for database operations\n\n    # Check if database exists\n    curs.execute(\"SELECT 1 FROM pg_database WHERE datname = %s\", (db,))\n    exists = curs.fetchone()\n\n    if exists:\n        # Terminate all other connections\n        curs.execute(f\"\"\"\n            SELECT pg_terminate_backend(pg_stat_activity.pid)\n            FROM pg_stat_activity\n            WHERE pg_stat_activity.datname = %s AND pid <> pg_backend_pid()\n        \"\"\", (db,))\n\n        # Drop the database\n        curs.execute(f\"DROP DATABASE {db}\")\n        print(f'{db} successfully dropped.')\n\n    if recreate:\n        curs.execute(f\"CREATE DATABASE {db}\")\n        print(f'{db} successfully recreated.')\n\n    conn.close()\n    return\n\n# Example usage\ndb_clear('test')"}
{"input_text": "convert following Python code from MSSQL to Postgresql \n\nimport os, csv, pymssql\n\nDIR_PATH = os.path.abspath(os.path.dirname(__file__))\nFILE_NAME_PATTERN = 'tbl_'\n\n#SQL Server Config\nSERVER = 'Server Name'\nUSERNAME = 'SQL Auth Username'\nPASSWORD = 'SQL Auth password'\nDATABASE = 'Database Name'\n\ndef sql2csv(DIR_PATH, FILE_NAME_PATTERN):\n    conn = pymssql.connect(SERVER, USERNAME, PASSWORD, DATABASE)\n    cursor = conn.cursor()\n    cursor.execute('SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES')\n    tbls = cursor.fetchall()\n    for row in tbls:\n        print row[0] + '.' + row[1]\n        with open(os.path.join(DIR_PATH, '_Output', 'SQLOutput', FILE_NAME_PATTERN + row[0] + '.' + row[1] + '.csv'), 'wb') as tbl_output:\n            cursor.execute('SELECT * FROM ' + row[0] + '.' + row[1])\n            writer = csv.writer(tbl_output)\n            writer.writerow([ i[0] for i in cursor.description ]) # heading\n            writer.writerows(cursor.fetchall())\n\nif __name__ == '__main__':\n    sql2csv(DIR_PATH, FILE_NAME_PATTERN)", "output_text": "import os\nimport csv\nimport psycopg2\n\nDIR_PATH = os.path.abspath(os.path.dirname(__file__))\nFILE_NAME_PATTERN = 'tbl_'\n\n# PostgreSQL Config\nHOST = 'localhost'\nPORT = '5432'\nDATABASE = 'Database Name'\nUSERNAME = 'PostgreSQL Username'\nPASSWORD = 'PostgreSQL password'\n\ndef sql2csv(DIR_PATH, FILE_NAME_PATTERN):\n    conn = psycopg2.connect(\n        host=HOST,\n        port=PORT,\n        database=DATABASE,\n        user=USERNAME,\n        password=PASSWORD\n    )\n    cursor = conn.cursor()\n\n    cursor.execute(\"\"\"\n        SELECT table_schema, table_name \n        FROM information_schema.tables \n        WHERE table_schema NOT IN ('pg_catalog', 'information_schema')\n    \"\"\")\n    tbls = cursor.fetchall()\n\n    for row in tbls:\n        print(f\"{row[0]}.{row[1]}\")\n        output_path = os.path.join(DIR_PATH, '_Output', 'SQLOutput', f\"{FILE_NAME_PATTERN}{row[0]}.{row[1]}.csv\")\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n\n        with open(output_path, 'w', newline='') as tbl_output:\n            cursor.execute(f'SELECT * FROM \"{row[0]}\".\"{row[1]}\"')\n            writer = csv.writer(tbl_output)\n            writer.writerow([i[0] for i in cursor.description])  # heading\n            writer.writerows(cursor.fetchall())\n\n    cursor.close()\n    conn.close()\n\nif __name__ == '__main__':\n    sql2csv(DIR_PATH, FILE_NAME_PATTERN)"}
{"input_text": "convert following Python code from MSSQL to Postgresql \n\nimport csv\nimport datetime\nimport pymssql\nfrom decimal import Decimal\n\n# Connect to MSSQL Server\nconn = pymssql.connect(server=\"SERVER:PORT\",\n                       user=\"USERNAME\",\n                       password=\"PASSWORD\",\n                       database=\"DATABASE\")\n\n# Create a database cursor\ncursor = conn.cursor()\n\n# Replace this nonsense with your own query :)\nquery = \"\"\"SELECT TOP 25 * FROM FSDBDATA.dbo.MS04311\nWHERE sitecode LIKE 'PRIMET'\nORDER BY DATE_TIME DESC\"\"\"\n\n# Execute the query\ncursor.execute(query)\n\n# Go through the results row-by-row and write the output to a CSV file\n# (QUOTE_NONNUMERIC applies quotes to non-numeric data; change this to\n# QUOTE_NONE for no quotes.  See https://docs.python.org/2/library/csv.html\n# for other settings options)\nwith open(\"output.csv\", \"w\") as outfile:\n    writer = csv.writer(outfile, quoting=csv.QUOTE_NONNUMERIC)\n    for row in cursor:\n        writer.writerow(row)\n\n# Close the cursor and the database connection\ncursor.close()\nconn.close()", "output_text": "import csv\nimport datetime\nimport psycopg2\nfrom decimal import Decimal\n\n# Connect to PostgreSQL\nconn = psycopg2.connect(\n    host=\"SERVER\",\n    port=\"PORT\",\n    user=\"USERNAME\",\n    password=\"PASSWORD\",\n    database=\"DATABASE\"\n)\n\n# Create a database cursor\ncursor = conn.cursor()\n\n# Replace this nonsense with your own query :)\nquery = \"\"\"\nSELECT * FROM \"FSDBDATA\".\"MS04311\"\nWHERE sitecode LIKE 'PRIMET'\nORDER BY DATE_TIME DESC\nLIMIT 25\n\"\"\"\n\n# Execute the query\ncursor.execute(query)\n\n# Go through the results row-by-row and write the output to a CSV file\n# (QUOTE_NONNUMERIC applies quotes to non-numeric data; change this to\n# QUOTE_NONE for no quotes. See https://docs.python.org/3/library/csv.html\n# for other settings options)\nwith open(\"output.csv\", \"w\", newline='') as outfile:\n    writer = csv.writer(outfile, quoting=csv.QUOTE_NONNUMERIC)\n    for row in cursor:\n        writer.writerow(row)\n\n# Close the cursor and the database connection\ncursor.close()\nconn.close()"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nimport pandas as pd\nimport pyodbc\n\nsql_conn = pyodbc.connect('DRIVER={ODBC Driver 13 for SQL Server};  \\\n           SERVER=SQLSERVER2017;DATABASE=master;Trusted_Connection=yes') \nquery = \"SELECT * FROM sys.tables\"\ndf = pd.read_sql(query, sql_conn)\n\ndf.head(3)", "output_text": "import pandas as pd\nimport psycopg2\n\n# Establish connection to PostgreSQL\nconn = psycopg2.connect(\n    host=\"your_host\",\n    database=\"your_database\",\n    user=\"your_username\",\n    password=\"your_password\"\n)\n\n# SQL query\nquery = \"SELECT * FROM information_schema.tables WHERE table_schema = 'public'\"\n\n# Read SQL query into a DataFrame\ndf = pd.read_sql(query, conn)\n\n# Display the first 3 rows\nprint(df.head(3))\n\n# Close the connection\nconn.close()"}
{"input_text": "convert following Python code from MSSQL to Postgresql \n#Using the pymssql driver\nimport pymssql\n\n#Connect to your database. \n#Replace server name, username, and password with your credentials   \n#Code is dependent on AdventureWorks database\nconn = pymssql.connect(server='yourserver', user='yourusername@yourserver', \n\tpassword='yourpassword', database='yourdatabase')\ncursor = conn.cursor()\n\n#SELECT\n#Execute a simple select statement. \ncursor.execute('SELECT TOP 10 Title, FirstName, LastName from SalesLT.Customer;')\nrow = cursor.fetchone()\n\n#Print results from select statement.\nwhile row:\n    print str(row[0]) + \" \" + str(row[1]) + \" \" + str(row[2])   \n    row = cursor.fetchone()\n\n#INSERT    \n#Execute an insert statement    \ncursor.execute(\"INSERT SalesLT.Product (Name, ProductNumber, Color, StandardCost, ListPrice, SellStartDate) OUTPUT INSERTED.ProductID VALUES ('Bike', 'B1', 'Blue', 50, 120, CURRENT_TIMESTAMP)\")\nrow = cursor.fetchone()\n\n#Print the ID of the inserted row. \nwhile row:\n    print \"Inserted Product ID : \" +str(row[0])\n    row = cursor.fetchone()", "output_text": "import psycopg2\nfrom psycopg2.extras import DictCursor\n\n# Connect to your database.\n# Replace host, database, user, and password with your credentials\nconn = psycopg2.connect(\n    host='yourserver',\n    database='yourdatabase',\n    user='yourusername',\n    password='yourpassword'\n)\ncursor = conn.cursor(cursor_factory=DictCursor)\n\n# SELECT\n# Execute a simple select statement.\ncursor.execute('SELECT \"Title\", \"FirstName\", \"LastName\" FROM \"SalesLT\".\"Customer\" LIMIT 10;')\nrows = cursor.fetchall()\n\n# Print results from select statement.\nfor row in rows:\n    print(f\"{row['Title']} {row['FirstName']} {row['LastName']}\")\n\n# INSERT\n# Execute an insert statement\ncursor.execute(\"\"\"\n    INSERT INTO \"SalesLT\".\"Product\" \n    (\"Name\", \"ProductNumber\", \"Color\", \"StandardCost\", \"ListPrice\", \"SellStartDate\") \n    VALUES ('Bike', 'B1', 'Blue', 50, 120, CURRENT_TIMESTAMP)\n    RETURNING \"ProductID\"\n\"\"\")\nrow = cursor.fetchone()\n\n# Print the ID of the inserted row.\nif row:\n    print(f\"Inserted Product ID : {row['ProductID']}\")\n\n# Commit the transaction and close the connection\nconn.commit()\ncursor.close()\nconn.close()"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nfrom os import getenv\nimport pymssql\n\nserver = getenv(\"PYMSSQL_TEST_SERVER\")\nuser = getenv(\"PYMSSQL_TEST_USERNAME\")\npassword = getenv(\"PYMSSQL_TEST_PASSWORD\")\n\nconn = pymssql.connect(server, user, password, \"tempdb\")\ncursor = conn.cursor()\ncursor.execute(\"\"\"\nIF OBJECT_ID('persons', 'U') IS NOT NULL\n    DROP TABLE persons\nCREATE TABLE persons (\n    id INT NOT NULL,\n    name VARCHAR(100),\n    salesrep VARCHAR(100),\n    PRIMARY KEY(id)\n)\n\"\"\")", "output_text": "from os import getenv\nimport psycopg2\n\n# Get connection details from environment variables\nhost = getenv(\"POSTGRES_TEST_HOST\")\nuser = getenv(\"POSTGRES_TEST_USERNAME\")\npassword = getenv(\"POSTGRES_TEST_PASSWORD\")\ndatabase = \"tempdb\"  # or use getenv(\"POSTGRES_TEST_DATABASE\") if you want to set it as an env variable\n\n# Establish connection\nconn = psycopg2.connect(\n    host=host,\n    user=user,\n    password=password,\n    database=database\n)\n\n# Create a cursor\ncursor = conn.cursor()\n\n# SQL command to drop table if exists and create a new one\nsql_command = \"\"\"\nDROP TABLE IF EXISTS persons;\n\nCREATE TABLE persons (\n    id INT NOT NULL,\n    name VARCHAR(100),\n    salesrep VARCHAR(100),\n    PRIMARY KEY(id)\n);\n\"\"\"\n\n# Execute the SQL command\ncursor.execute(sql_command)\n\n# Commit the changes\nconn.commit()\n\n# Close the cursor and the connection\ncursor.close()\nconn.close()"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nimport pyodbc #to connect to SQL Server\n\nsqlConnStr = ('DRIVER={SQL Server Native Client 11.0};Server=YourServer;Database=Test;'+\n            'Trusted_Connection=YES') \n            \nconn = pyodbc.connect(sqlConnStr)\ncurs = conn.cursor()\n\ndef findTablesWithNoPk(curs):\n    \"\"\"Takes an active cursor as an input and returns a list\n    of the names of all tables with no Primary key\"\"\"\n    noPkTbls = []    \n    #using fetchall to free up the cursor for queries in the loop\n    #if the cursor will not be used in the loop, it is often better\n    #to iterate over the rows instead.\n    for row in curs.tables(tableType = 'TABLE').fetchall():\n        #fetchone will return None, which is treated as false, if there are no rows.\n        #Cannot use rowcount since that often returns -1 for performance reasons until\n        #a row has been fetched.\n        if not curs.primaryKeys(row.table_name, row.table_cat, row.table_schem).fetchone():\n            noPkTbls.append(row.table_schem + '.' + row.table_name)\n    return noPkTbls\n    \nprint findTablesWithNoPk(curs)", "output_text": "import psycopg2\nfrom psycopg2 import sql\n\n# Connection parameters\nparams = {\n    'host': 'YourServer',\n    'database': 'Test',\n    'user': 'YourUsername',\n    'password': 'YourPassword'\n}\n\nconn = psycopg2.connect(**params)\ncurs = conn.cursor()\n\ndef find_tables_with_no_pk(curs):\n    \"\"\"Takes an active cursor as an input and returns a list\n    of the names of all tables with no Primary key\"\"\"\n    no_pk_tbls = []\n\n    # Get all tables in the public schema\n    curs.execute(\"\"\"\n        SELECT table_schema, table_name \n        FROM information_schema.tables \n        WHERE table_schema = 'public' AND table_type = 'BASE TABLE'\n    \"\"\")\n    \n    tables = curs.fetchall()\n\n    for table_schema, table_name in tables:\n        # Check if the table has a primary key\n        curs.execute(\"\"\"\n            SELECT 1\n            FROM information_schema.table_constraints\n            WHERE constraint_type = 'PRIMARY KEY'\n              AND table_schema = %s\n              AND table_name = %s\n        \"\"\", (table_schema, table_name))\n        \n        if not curs.fetchone():\n            no_pk_tbls.append(f\"{table_schema}.{table_name}\")\n\n    return no_pk_tbls\n\nprint(find_tables_with_no_pk(curs))\n\n# Don't forget to close the cursor and connection when you're done\ncurs.close()\nconn.close()"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nwith pymssql.connect(server, user, password, \"tempdb\") as conn:\n    with conn.cursor(as_dict=True) as cursor:\n        cursor.execute(\"\"\"\n        CREATE PROCEDURE FindPerson\n            @name VARCHAR(100)\n        AS BEGIN\n            SELECT * FROM persons WHERE name = @name\n        END\n        \"\"\")\n        cursor.callproc('FindPerson', ('Jane Doe',))\n        for row in cursor:\n            print(\"ID=%d, Name=%s\" % (row['id'], row['name']))", "output_text": "import psycopg2\n\n# Establish the connection to PostgreSQL\nconn = psycopg2.connect(\n    dbname=\"tempdb\",\n    user=\"your_username\",\n    password=\"your_password\",\n    host=\"localhost\",  # or the address of your PostgreSQL server\n    port=\"5432\"        # default port for PostgreSQL\n)\n\n# Create a cursor object\ncursor = conn.cursor()\n\n# Create a stored function in PostgreSQL\ncursor.execute(\"\"\"\nCREATE OR REPLACE FUNCTION FindPerson(name VARCHAR)\nRETURNS TABLE(id INT, name VARCHAR) AS $$\nBEGIN\n    RETURN QUERY SELECT * FROM persons WHERE name = $1;\nEND;\n$$ LANGUAGE plpgsql;\n\"\"\")\nconn.commit()\n\n# Call the stored function and fetch the results\ncursor.execute(\"SELECT * FROM FindPerson(%s);\", ('Jane Doe',))\nrows = cursor.fetchall()\n\n# Print the results\nfor row in rows:\n    print(f\"ID={row[0]}, Name={row[1]}\")\n\n# Close the cursor and connection\ncursor.close()\nconn.close()"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nimport _mssql\n\nconn = _mssql.connect(server='SQL01', user='user', password='password',\n                      database='mydatabase')\ntry:\n    conn.execute_non_query('CREATE TABLE t1(id INT, name VARCHAR(50))')\nexcept _mssql.MssqlDatabaseException as e:\n    if e.number == 2714 and e.severity == 16:\n        # table already existed, so quieten the error\n    else:\n        raise # re-raise real error\nfinally:\n    conn.close()", "output_text": "import psycopg2\nfrom psycopg2 import sql, errors\n\nconn = psycopg2.connect(\n    dbname=\"mydatabase\",\n    user=\"your_username\",\n    password=\"your_password\",\n    host=\"localhost\",\n    port=\"5432\"\n)\n\ntry:\n    cursor = conn.cursor()\n    cursor.execute('CREATE TABLE t1(id INT, name VARCHAR(50))')\n    conn.commit()\nexcept errors.DuplicateTable as e:\n    pass\nexcept Exception as e:\n    raise\nfinally:\n    cursor.close()\n    conn.close()"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nimport _mssql\n\ndef my_msg_handler(msgstate, severity, srvname, procname, line, msgtext):\n    \"\"\"\n    Our custom handler -- It simpy prints a string to stdout assembled from\n    the pieces of information sent by the server.\n    \"\"\"\n    print(\"my_msg_handler: msgstate = %d, severity = %d, procname = '%s', \"\n          \"line = %d, msgtext = '%s'\" % (msgstate, severity, procname,\n                                         line, msgtext))\n\ncnx = _mssql.connect(server='SQL01', user='user', password='password')\ntry:\n    cnx.set_msghandler(my_msg_handler)  # Install our custom handler\n    cnx.execute_non_query(\"USE mydatabase\")  # It gets called at this point\nfinally:\n    cnx.close()", "output_text": "import psycopg2\nimport psycopg2.extensions\n\ndef my_msg_handler(notice):\n    msg = notice.message.strip()\n    severity = notice.severity\n    line = notice.cursor_position if notice.cursor_position else 0\n    print(f\"my_msg_handler: severity = {severity}, line = {line}, msgtext = '{msg}'\")\n\nconn = psycopg2.connect(\n    dbname=\"mydatabase\",\n    user=\"your_username\",\n    password=\"your_password\",\n    host=\"localhost\",\n    port=\"5432\"\n)\n\ntry:\n    conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)\n    conn.set_notice_processor(my_msg_handler)\n    cursor = conn.cursor()\n    cursor.execute(\"SET search_path TO mydatabase\")\nfinally:\n    cursor.close()\n    conn.close()"}
{"input_text": "convert following Python code from MSSQL to Postgresql \nimport datetime\nimport gevent\nimport gevent.socket\nimport os\nimport pymssql\n#import random\n\nserver = os.getenv(\"PYMSSQL_TEST_SERVER\")\nuser = os.getenv(\"PYMSSQL_TEST_USERNAME\")\npassword = os.getenv(\"PYMSSQL_TEST_PASSWORD\")\ndatabase = os.getenv(\"PYMSSQL_TEST_DATABASE\")\n\ndef run(num):\n#    gevent.sleep(random.randint(0, 2) * 0.001)\n\n    now = datetime.datetime.now()\n    print(\"%s connecting at time: %s\" % (num, now))\n    conn = pymssql.connect(host=server,\n                           database=database,\n                           user=user,\n                           password=password)\n    cur = conn.cursor()\n    cur.execute(\"\"\"\n    WAITFOR DELAY '00:00:05'  -- sleep for 5 seconds\n    SELECT CURRENT_TIMESTAMP\n    \"\"\")\n    row = cur.fetchone()\n    print(\"    CURRENT_TIMESTAMP = %r\" % (row[0],))\n    conn.close()\n\ndef do_test():\n    greenlets = []\n\n    dt1 = datetime.datetime.now()\n\n    for i in range(5):\n        gevent.sleep(1)\n        greenlets.append(gevent.spawn(run, i))\n\n    gevent.joinall(greenlets)\n\n    dt2 = datetime.datetime.now()\n\n    print(\"Done running - elapsed time: %s\" % (dt2 - dt1))\n\n\nprint(\"**** Running test with NO wait_callback...\\n\")\ndo_test()\n\nprint(\"\\n***** Running test WITH gevent.sleep wait_callback...\\n\")\ndef wait_callback(read_fileno):\n    # print(\"    *** wait_callback called with read_fileno = %r\" % (read_fileno,))\n    gevent.sleep()\n\npymssql.set_wait_callback(wait_callback)\n\ndo_test()\n\nprint(\"\\n***** Running test WITH gevent.socket.wait_read wait_callback...\\n\")\ndef wait_callback(read_fileno):\n    # print(\"    *** wait_callback called with read_fileno = %r\" % (read_fileno,))\n    gevent.socket.wait_read(read_fileno)\n\npymssql.set_wait_callback(wait_callback)\n\ndo_test()", "output_text": "import datetime\nimport gevent\nimport gevent.socket\nimport os\nimport psycopg2\n\nserver = os.getenv(\"POSTGRES_TEST_SERVER\", \"localhost\")\nuser = os.getenv(\"POSTGRES_TEST_USERNAME\", \"your_username\")\npassword = os.getenv(\"POSTGRES_TEST_PASSWORD\", \"your_password\")\ndatabase = os.getenv(\"POSTGRES_TEST_DATABASE\", \"your_database\")\n\ndef run(num):\n    now = datetime.datetime.now()\n    print(\"%s connecting at time: %s\" % (num, now))\n    conn = psycopg2.connect(\n        host=server,\n        dbname=database,\n        user=user,\n        password=password\n    )\n    cur = conn.cursor()\n    cur.execute(\"\"\"\n    DO $$\n    BEGIN\n        PERFORM pg_sleep(5);  -- sleep for 5 seconds\n    END $$;\n    SELECT CURRENT_TIMESTAMP;\n    \"\"\")\n    row = cur.fetchone()\n    print(\"    CURRENT_TIMESTAMP = %r\" % (row[0],))\n    cur.close()\n    conn.close()\n\ndef do_test():\n    greenlets = []\n    dt1 = datetime.datetime.now()\n\n    for i in range(5):\n        gevent.sleep(1)\n        greenlets.append(gevent.spawn(run, i))\n\n    gevent.joinall(greenlets)\n\n    dt2 = datetime.datetime.now()\n    print(\"Done running - elapsed time: %s\" % (dt2 - dt1))\n\nprint(\"**** Running test with NO wait_callback...\\n\")\ndo_test()\n\nprint(\"\\n***** Running test WITH gevent.sleep wait_callback...\\n\")\ndef wait_callback(read_fileno):\n    gevent.sleep()\n\npsycopg2.extensions.set_wait_callback(wait_callback)\ndo_test()\n\nprint(\"\\n***** Running test WITH gevent.socket.wait_read wait_callback...\\n\")\ndef wait_callback(read_fileno):\n    gevent.socket.wait_read(read_fileno)\n\npsycopg2.extensions.set_wait_callback(wait_callback)\ndo_test()"}
